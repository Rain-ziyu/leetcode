//Áªô‰Ω†‰∏Ä‰∏™Êúâ n ‰∏™ËäÇÁÇπÁöÑ ÊúâÂêëÂ∏¶ÊùÉ ÂõæÔºåËäÇÁÇπÁºñÂè∑‰∏∫ 0 Âà∞ n - 1 „ÄÇÂõæ‰∏≠ÁöÑÂàùÂßãËæπÁî®Êï∞ÁªÑ edges Ë°®Á§∫ÔºåÂÖ∂‰∏≠ edges[i] = [fromi, 
//toi, edgeCosti] Ë°®Á§∫‰ªé fromi Âà∞ toi Êúâ‰∏ÄÊù°‰ª£‰ª∑‰∏∫ edgeCosti ÁöÑËæπ„ÄÇ 
//
// ËØ∑‰Ω†ÂÆûÁé∞‰∏Ä‰∏™ Graph Á±ªÔºö 
//
// 
// Graph(int n, int[][] edges) ÂàùÂßãÂåñÂõæÊúâ n ‰∏™ËäÇÁÇπÔºåÂπ∂ËæìÂÖ•ÂàùÂßãËæπ„ÄÇ 
// addEdge(int[] edge) ÂêëËæπÈõÜ‰∏≠Ê∑ªÂä†‰∏ÄÊù°ËæπÔºåÂÖ∂‰∏≠ edge = [from, to, edgeCost] „ÄÇÊï∞ÊçÆ‰øùËØÅÊ∑ªÂä†ËøôÊù°Ëæπ‰πãÂâçÂØπÂ∫îÁöÑ‰∏§
//‰∏™ËäÇÁÇπ‰πãÈó¥Ê≤°ÊúâÊúâÂêëËæπ„ÄÇ 
// int shortestPath(int node1, int node2) ËøîÂõû‰ªéËäÇÁÇπ node1 Âà∞ node2 ÁöÑË∑ØÂæÑ ÊúÄÂ∞è ‰ª£‰ª∑„ÄÇÂ¶ÇÊûúË∑ØÂæÑ‰∏çÂ≠òÂú®Ôºå
//ËøîÂõû -1 „ÄÇ‰∏ÄÊù°Ë∑ØÂæÑÁöÑ‰ª£‰ª∑ÊòØË∑ØÂæÑ‰∏≠ÊâÄÊúâËæπ‰ª£‰ª∑‰πãÂíå„ÄÇ 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//
// ËæìÂÖ•Ôºö
//["Graph", "shortestPath", "shortestPath", "addEdge", "shortestPath"]
//[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]
//], [0, 3]]
//ËæìÂá∫Ôºö
//[null, 6, -1, null, 6]
//
//Ëß£ÈáäÔºö
//Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);
//g.shortestPath(3, 2); // ËøîÂõû 6 „ÄÇ‰ªé 3 Âà∞ 2 ÁöÑÊúÄÁü≠Ë∑ØÂæÑÂ¶ÇÁ¨¨‰∏ÄÂπÖÂõæÊâÄÁ§∫Ôºö3 -> 0 -> 1 -> 2 ÔºåÊÄª‰ª£‰ª∑‰∏∫ 3 +
// 2 + 1 = 6 „ÄÇ
//g.shortestPath(0, 3); // ËøîÂõû -1 „ÄÇÊ≤°Êúâ‰ªé 0 Âà∞ 3 ÁöÑË∑ØÂæÑ„ÄÇ
//g.addEdge([1, 3, 4]); // Ê∑ªÂä†‰∏ÄÊù°ËäÇÁÇπ 1 Âà∞ËäÇÁÇπ 3 ÁöÑËæπÔºåÂæóÂà∞Á¨¨‰∫åÂπÖÂõæ„ÄÇ
//g.shortestPath(0, 3); // ËøîÂõû 6 „ÄÇ‰ªé 0 Âà∞ 3 ÁöÑÊúÄÁü≠Ë∑ØÂæÑ‰∏∫ 0 -> 1 -> 3 ÔºåÊÄª‰ª£‰ª∑‰∏∫ 2 + 4 = 6 „ÄÇ
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= n <= 100 
// 0 <= edges.length <= n * (n - 1) 
// edges[i].length == edge.length == 3 
// 0 <= fromi, toi, from, to, node1, node2 <= n - 1 
// 1 <= edgeCosti, edgeCost <= 10‚Å∂ 
// Âõæ‰∏≠‰ªª‰ΩïÊó∂ÂÄôÈÉΩ‰∏ç‰ºöÊúâÈáçËæπÂíåËá™ÁéØ„ÄÇ 
// Ë∞ÉÁî® addEdge Ëá≥Â§ö 100 Ê¨°„ÄÇ 
// Ë∞ÉÁî® shortestPath Ëá≥Â§ö 100 Ê¨°„ÄÇ 
// 
//
// Related Topics Âõæ ËÆæËÆ° ÊúÄÁü≠Ë∑Ø Â†ÜÔºà‰ºòÂÖàÈòüÂàóÔºâ üëç 43 üëé 0

package main

import (
	"container/heap"
	"math"
)

func main() {

}
//leetcode submit region begin(Prohibit modification and deletion)
type Graph struct {
	graph [][]Pair
}

func Constructor(n int, edges [][]int) Graph {
	g := make([][]Pair, n)
	for i := 0; i < n; i++ {
		g[i] = []Pair{}
	}
	for _, e := range edges {
		x, y, cost := e[0], e[1], e[2]
		g[x] = append(g[x], Pair{y, cost})
	}
	return Graph{g}
}

func (this *Graph) AddEdge(edge []int)  {
	x, y, cost := edge[0], edge[1], edge[2]
	(*this).graph[x] = append((*this).graph[x], Pair{y, cost})
}

func (this *Graph) ShortestPath(node1 int, node2 int) int {
	pq := PriorityQueue{}
	dist := make([]int, len((*this).graph))
	for i := 0; i < len((*this).graph); i++ {
		dist[i] = math.MaxInt32
	}
	dist[node1] = 0
	heap.Push(&pq, Pair{0, node1})
	for len(pq) > 0 {
		p := heap.Pop(&pq).(Pair)
		cost, cur := p.first, p.second
		if cur == node2 {
			return cost
		}
		for _, e := range (*this).graph[cur] {
			next, ncost := e.first, e.second
			if dist[next] > cost + ncost {
				dist[next] = cost + ncost
				heap.Push(&pq, Pair{cost + ncost, next})
			}
		}
	}
	return -1;
}

type Pair struct {
	first int
	second int
}

type PriorityQueue []Pair

func (pq PriorityQueue) Swap(i, j int) {
	pq[i], pq[j] = pq[j], pq[i]
}

func (pq PriorityQueue) Len() int {
	return len(pq)
}

func (pq PriorityQueue) Less(i, j int) bool {
	return pq[i].first < pq[j].first
}

func (pq *PriorityQueue) Push(x any) {
	*pq = append(*pq, x.(Pair))
}

func (pq *PriorityQueue) Pop() any {
	n := len(*pq)
	x := (*pq)[n - 1]
	*pq = (*pq)[:n - 1]
	return x
}

/**
 * Your Graph object will be instantiated and called as such:
 * obj := Constructor(n, edges);
 * obj.AddEdge(edge);
 * param_2 := obj.ShortestPath(node1,node2);
 */
//leetcode submit region end(Prohibit modification and deletion)

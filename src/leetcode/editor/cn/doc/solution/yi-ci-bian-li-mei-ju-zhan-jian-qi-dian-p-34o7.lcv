## 题意

这题的标题应该是《棋盘上的战舰》，来源于 [海战棋](http://zh.battleship-game.org/)，把横着或竖着的**连续** X 看成一艘战舰，统计棋盘上有多少艘战舰。

## 思路

战舰的个数，等于战舰「头部」的个数。如下图，我们只需要统计蓝色 X 的个数，即为战舰的个数。

![lc419.png](https://pic.leetcode.cn/1718065153-hjSHcx-lc419.png)

具体来说，如果位于 $(i,j)$ 的格子是战舰的头部，那么左边和上边的相邻格子不能是 X，即：

- 如果 $j>0$，那么 $(i,j-1)$ 不能是 X。
- 如果 $i>0$，那么 $(i-1,j)$ 不能是 X。

* [sol-Python3]

```py
class Solution:
    def countBattleships(self, board: List[List[str]]) -> int:
        ans = 0
        for i, row in enumerate(board):
            for j, c in enumerate(row):
                if c == 'X' and (j == 0 or row[j - 1] != 'X') and \
                                (i == 0 or board[i - 1][j] != 'X'):
                    ans += 1
        return ans
```

* [sol-Java]

```java
public class Solution {
    public int countBattleships(char[][] board) {
        int ans = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 'X' && 
                    (j == 0 || board[i][j - 1] != 'X') && 
                    (i == 0 || board[i - 1][j] != 'X')) {
                    ans++;
                }
            }
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int countBattleships(vector<vector<char>>& board) {
        int ans = 0;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                if (board[i][j] == 'X' && 
                    (j == 0 || board[i][j - 1] != 'X') && 
                    (i == 0 || board[i - 1][j] != 'X')) {
                    ans++;
                }
            }
        }
        return ans;
    }
};
```

* [sol-C]

```c
int countBattleships(char** board, int boardSize, int* boardColSize) {
    int ans = 0;
    for (int i = 0; i < boardSize; i++) {
        for (int j = 0; j < boardColSize[i]; j++) {
            if (board[i][j] == 'X' && 
                (j == 0 || board[i][j - 1] != 'X') && 
                (i == 0 || board[i - 1][j] != 'X')) {
                ans++;
            }
        }
    }
    return ans;
}
```

* [sol-Go]

```go
func countBattleships(board [][]byte) (ans int) {
    for i, row := range board {
        for j, c := range row {
            if c == 'X' &&
                (j == 0 || row[j-1] != 'X') &&
                (i == 0 || board[i-1][j] != 'X') {
                ans++
            }
        }
    }
    return
}
```

* [sol-JavaScript]

```js
var countBattleships = function(board) {
    let ans = 0;
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[i].length; j++) {
            if (board[i][j] === 'X' && 
                (j === 0 || board[i][j - 1] !== 'X') && 
                (i === 0 || board[i - 1][j] !== 'X')) {
                ans++;
            }
        }
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn count_battleships(board: Vec<Vec<char>>) -> i32 {
        let mut ans = 0;
        for (i, row) in board.iter().enumerate() {
            for (j, &c) in row.iter().enumerate() {
                if c == 'X' && 
                    (j == 0 || row[j - 1] != 'X') &&
                    (i == 0 || board[i - 1][j] != 'X') {
                    ans += 1;
                }
            }
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mn)$，其中 $m$ 和 $n$ 分别为 $\textit{board}$ 的行数和列数。
- 空间复杂度：$\mathcal{O}(1)$。

## 分类题单

以下题单没有特定的顺序，可以按照个人喜好刷题。

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

## 分析

题目相当于给你一条**链**上的**有向边**，你需要找到终点，也就是**没有出边的点**。

既然没有出边，那么终点必然不在 $\textit{cityA}_i$ 中。

## 方法一：两次遍历

1. 遍历 $\textit{paths}$，把所有 $\textit{cityA}_i$ 保存到一个哈希集合 $\textit{setA}$ 中。
2. 再次遍历 $\textit{paths}$，如果发现 $\textit{cityB}_i$ 不在 $\textit{setA}$ 中，则立刻返回 $\textit{cityB}_i$。

* [sol-Python3]

```py
class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
        set_a = set(p[0] for p in paths)
        return next(p[1] for p in paths if p[1] not in set_a)
```

* [sol-Java]

```java
class Solution {
    public String destCity(List<List<String>> paths) {
        Set<String> setA = new HashSet<>(paths.size()); // 预分配空间
        for (List<String> p : paths) {
            setA.add(p.get(0));
        }

        for (List<String> p : paths) {
            if (!setA.contains(p.get(1))) {
                return p.get(1);
            }
        }
        return "";
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    string destCity(vector<vector<string>>& paths) {
        unordered_set<string> set_a;
        for (auto& p : paths) {
            set_a.insert(p[0]);
        }

        for (auto& p : paths) {
            if (!set_a.contains(p[1])) {
                return p[1];
            }
        }
        return "";
    }
};
```

* [sol-Go]

```go
func destCity(paths [][]string) string {
    setA := make(map[string]struct{}, len(paths)) // 预分配空间
    for _, p := range paths {
        setA[p[0]] = struct{}{}
    }

    for _, p := range paths {
        if _, ok := setA[p[1]]; !ok {
            return p[1]
        }
    }
    return ""
}
```

* [sol-JavaScript]

```js
var destCity = function(paths) {
    const setA = new Set();
    for (const p of paths) {
        setA.add(p[0]);
    }

    for (const p of paths) {
        if (!setA.has(p[1])) {
            return p[1];
        }
    }
    return "";
};
```

* [sol-Rust]

```rust
use std::collections::HashSet;

impl Solution {
    pub fn dest_city(paths: Vec<Vec<String>>) -> String {
        let set_a = paths.iter().map(|p| p[0].clone()).collect::<HashSet<_>>();
        paths.into_iter().find(|p| !set_a.contains(&p[1])).unwrap()[1].clone()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm)$，其中 $n$ 是 $\textit{paths}$ 的长度，$m\le 10$ 是字符串的长度。
- 空间复杂度：$\mathcal{O}(nm)$。

## 方法二：一次遍历

在方法一的基础上，额外维护一个哈希集合 $\textit{setB}$，用来存储那些「可能是答案」的 $\textit{cityB}_i$：

- 如果 $\textit{cityA}_i$ 在 $\textit{setB}$ 中，那么 $\textit{cityA}_i$ 必然不是答案，从 $\textit{setB}$ 中移除。代码实现时，可以简化为直接从 $\textit{setB}$ 中移除 $\textit{cityA}_i$，无需检查其是否存在。
- 如果 $\textit{cityB}_i$ 不在 $\textit{setA}$ 中，那么 $\textit{cityB}_i$ 有可能是答案，加到 $\textit{setB}$ 中。

最后 $\textit{setB}$ 必然恰好剩下一个元素（题目保证），返回这个元素。

* [sol-Python3]

```py
class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
        set_a = set()
        set_b = set()
        for a, b in paths:
            set_b.discard(a)  # a 一定不是答案
            if b not in set_a:  # b 有可能是答案
                set_b.add(b)
            set_a.add(a)
        return set_b.pop()
```

* [sol-Java]

```java
class Solution {
    public String destCity(List<List<String>> paths) {
        Set<String> setA = new HashSet<>(paths.size());
        Set<String> setB = new HashSet<>();
        for (List<String> p : paths) {
            String a = p.get(0);
            String b = p.get(1);
            setB.remove(a); // a 一定不是答案
            if (!setA.contains(b)) { // b 有可能是答案
                setB.add(b);
            }
            setA.add(a);
        }
        return setB.iterator().next();
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    string destCity(vector<vector<string>>& paths) {
        unordered_set<string> set_a, set_b;
        for (auto& p : paths) {
            auto& a = p[0];
            auto& b = p[1];
            set_b.erase(a); // a 一定不是答案
            if (!set_a.contains(b)) { // b 有可能是答案
                set_b.insert(b);
            }
            set_a.insert(a);
        }
        return *set_b.begin();
    }
};
```

* [sol-Go]

```go
func destCity(paths [][]string) string {
    setA := make(map[string]struct{}, len(paths))
    setB := map[string]struct{}{}
    for _, p := range paths {
        a, b := p[0], p[1]
        delete(setB, a) // a 一定不是答案
        if _, ok := setA[b]; !ok { // b 有可能是答案
            setB[b] = struct{}{}
        }
        setA[a] = struct{}{}
    }
    for b := range setB {
        return b
    }
    return ""
}
```

* [sol-JavaScript]

```js
var destCity = function(paths) {
    const setA = new Set();
    const setB = new Set();
    for (const [a, b] of paths) {
        setB.delete(a); // a 一定不是答案
        if (!setA.has(b)) { // b 有可能是答案
            setB.add(b);
        }
        setA.add(a);
    }
    return [...setB][0];
};
```

* [sol-Rust]

```rust
use std::collections::HashSet;

impl Solution {
    pub fn dest_city(paths: Vec<Vec<String>>) -> String {
        let mut set_a = HashSet::with_capacity(paths.len());
        let mut set_b = HashSet::new();
        for p in paths {
            let a = &p[0];
            let b = &p[1];
            set_b.remove(a); // a 一定不是答案
            if !set_a.contains(b) { // b 有可能是答案
                set_b.insert(b.clone());
            }
            set_a.insert(a.clone());
        }
        set_b.into_iter().next().unwrap()
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(nm)$，其中 $n$ 是 $\textit{paths}$ 的长度，$m\le 10$ 是字符串的长度。
- 空间复杂度：$\mathcal{O}(nm)$。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与一般树（前后指针/快慢指针/DFS/BFS/直径/LCA）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

#### 方法一：线段树

**思路与算法**

由题意可知，人只能往右边移动，并且两人交换位置后不影响答案。对于每一次询问不妨设 $a_i < b_i$。如果 $\textit{heights}[a_i] < \textit{heights}[b_i]$，那么答案就是 $b_i$，否则答案在 $b_i$ 右边。

令 $\textit{hights}$ 的长度为 $n$，问题转化为在区间 $[b_i+1,n]$ 中找到最左边的下标 $x$ 满足 $\textit{heights}[x] > \textit{heights}[b_i]$，对于此问题用线段树求解即可。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    vector<int> zd;

    void build(int l, int r, int rt, vector<int> &heights) {
        if (l == r) {
            zd[rt] = heights[l - 1];
            return;
        }

        int mid = (l + r) >> 1;
        build(l, mid, rt << 1, heights);
        build(mid + 1, r, rt << 1 | 1, heights);
        zd[rt] = max(zd[rt << 1], zd[rt << 1 | 1]);
    }

    int query(int pos, int val, int l, int r, int rt) {
        if (val >= zd[rt]) {
            return 0;
        }

        if (l == r) {
            return l;
        }

        int mid = (l + r) >> 1;
        if (pos <= mid) {
            int res = query(pos, val, l, mid, rt << 1);
            if (res != 0) {
                return res;
            }
        }
        return query(pos, val, mid + 1, r, rt << 1 | 1);
    }

    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {
        int n = heights.size();
        zd.resize(n * 4);
        build(1, n, 1, heights);

        int m = queries.size();
        vector<int> ans(m);
        for (int i = 0; i < m; i++) {
            int a = queries[i][0];
            int b = queries[i][1];
            if (a > b) {
                swap(a, b);
            }

            if (a == b || heights[a] < heights[b]) {
                ans[i] = b;
                continue;
            }

            ans[i] = query(b + 1, heights[a], 1, n, 1) - 1;
        }
        return ans;
    }
};
```

* [sol1-Java]

```Java
class Solution {
    int[] zd;

    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {
        int n = heights.length;
        zd = new int[n * 4];
        build(1, n, 1, heights);

        int m = queries.length;
        int[] ans = new int[m];
        for (int i = 0; i < m; i++) {
            int a = queries[i][0];
            int b = queries[i][1];
            if (a > b) {
                int temp = a;
                a = b;
                b = temp;
            }

            if (a == b || heights[a] < heights[b]) {
                ans[i] = b;
                continue;
            }

            ans[i] = query(b + 1, heights[a], 1, n, 1) - 1;
        }
        return ans;
    }

    public void build(int l, int r, int rt, int[] heights) {
        if (l == r) {
            zd[rt] = heights[l - 1];
            return;
        }

        int mid = (l + r) >> 1;
        build(l, mid, rt << 1, heights);
        build(mid + 1, r, rt << 1 | 1, heights);
        zd[rt] = Math.max(zd[rt << 1], zd[rt << 1 | 1]);
    }

    public int query(int pos, int val, int l, int r, int rt) {
        if (val >= zd[rt]) {
            return 0;
        }

        if (l == r) {
            return l;
        }

        int mid = (l + r) >> 1;
        if (pos <= mid) {
            int res = query(pos, val, l, mid, rt << 1);
            if (res != 0) {
                return res;
            }
        }
        return query(pos, val, mid + 1, r, rt << 1 | 1);
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    int[] zd;

    public int[] LeftmostBuildingQueries(int[] heights, int[][] queries) {
        int n = heights.Length;
        zd = new int[n * 4];
        Build(1, n, 1, heights);

        int m = queries.Length;
        int[] ans = new int[m];
        for (int i = 0; i < m; i++) {
            int a = queries[i][0];
            int b = queries[i][1];
            if (a > b) {
                int temp = a;
                a = b;
                b = temp;
            }

            if (a == b || heights[a] < heights[b]) {
                ans[i] = b;
                continue;
            }

            ans[i] = Query(b + 1, heights[a], 1, n, 1) - 1;
        }
        return ans;
    }

    public void Build(int l, int r, int rt, int[] heights) {
        if (l == r) {
            zd[rt] = heights[l - 1];
            return;
        }

        int mid = (l + r) >> 1;
        Build(l, mid, rt << 1, heights);
        Build(mid + 1, r, rt << 1 | 1, heights);
        zd[rt] = Math.Max(zd[rt << 1], zd[rt << 1 | 1]);
    }

    public int Query(int pos, int val, int l, int r, int rt) {
        if (val >= zd[rt]) {
            return 0;
        }

        if (l == r) {
            return l;
        }

        int mid = (l + r) >> 1;
        if (pos <= mid) {
            int res = Query(pos, val, l, mid, rt << 1);
            if (res != 0) {
                return res;
            }
        }
        return Query(pos, val, mid + 1, r, rt << 1 | 1);
    }
}
```

* [sol1-Go]

```Go
func build(l, r, rt int, heights []int) {
	if l == r {
		zd[rt] = heights[l - 1]
		return
	}
	mid := (l + r) >> 1
	build(l, mid, rt << 1, heights)
	build(mid + 1, r, rt << 1 | 1, heights)
	zd[rt] = max(zd[rt << 1], zd[rt << 1 | 1])
}

func query(pos, val, l, r, rt int) int {
	if val >= zd[rt] {
		return 0
	}
	if l == r {
		return l
	}
	mid := (l + r) >> 1
	if pos <= mid {
		res := query(pos, val, l, mid, rt << 1)
		if res != 0 {
			return res
		}
	}
	return query(pos, val, mid + 1, r, rt << 1 | 1)
}

func leftmostBuildingQueries(heights []int, queries [][]int) []int {
    n := len(heights)
	zd = make([]int, n * 4)
	build(1, n, 1, heights)

	m := len(queries)
	ans := make([]int, m)
	for i := 0; i < m; i++ {
		a, b := queries[i][0], queries[i][1]
		if a > b {
			a, b = b, a
		}
		if a == b || heights[a] < heights[b] {
			ans[i] = b
			continue
		}
		ans[i] = query(b + 1, heights[a], 1, n, 1) - 1
	}
	return ans
}

var zd []int
```

* [sol1-Python]

```Python
class Solution:
    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:
        n = len(heights)
        zd = [0] * (n * 4)

        def build(l, r, rt, heights):
            if l == r:
                zd[rt] = heights[l - 1]
                return

            mid = (l + r) // 2
            build(l, mid, rt << 1, heights)
            build(mid + 1, r, rt << 1 | 1, heights)
            zd[rt] = max(zd[rt << 1], zd[rt << 1 | 1])

        def query(pos, val, l, r, rt):
            if val >= zd[rt]:
                return 0
            if l == r:
                return l
            mid = (l + r) // 2
            if pos <= mid:
                res = query(pos, val, l, mid, rt << 1)
                if res != 0:
                    return res
            return query(pos, val, mid + 1, r, rt << 1 | 1)

        build(1, n, 1, heights)
        m = len(queries)
        ans = [0] * m
        for i in range(m):
            a, b = queries[i]
            if a > b:
                a, b = b, a
            if a == b or heights[a] < heights[b]:
                ans[i] = b
                continue
            ans[i] = query(b + 1, heights[a], 1, n, 1) - 1
        return ans
```

* [sol1-C]

```C
void build(int l, int r, int rt, int heights[], int n, int *zd) {
    if (l == r) {
        zd[rt] = heights[l - 1];
        return;
    }

    int mid = (l + r) >> 1;
    build(l, mid, rt << 1, heights, n, zd);
    build(mid + 1, r, rt << 1 | 1, heights, n, zd);
    zd[rt] = (zd[rt << 1] > zd[rt << 1 | 1]) ? zd[rt << 1] : zd[rt << 1 | 1];
}

int query(int pos, int val, int l, int r, int rt, int *zd) {
    if (val >= zd[rt]) {
        return 0;
    }

    if (l == r) {
        return l;
    }

    int mid = (l + r) >> 1;
    if (pos <= mid) {
        int res = query(pos, val, l, mid, rt << 1, zd);
        if (res != 0) {
            return res;
        }
    }
    return query(pos, val, mid + 1, r, rt << 1 | 1, zd);
}

int* leftmostBuildingQueries(int* heights, int heightsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {
    int n = heightsSize;
    int zd[n * 4];
    memset(zd, 0, sizeof(zd));
    build(1, n, 1, heights, n, zd);

    int* ans = (int*)malloc(queriesSize * sizeof(int));
    for (int i = 0; i < queriesSize; i++) {
        int a = queries[i][0];
        int b = queries[i][1];
        if (a > b) {
            int temp = a;
            a = b;
            b = temp;
        }
        if (a == b || heights[a] < heights[b]) {
            ans[i] = b;
            continue;
        }
        ans[i] = query(b + 1, heights[a], 1, n, 1, zd) - 1;
    }
    *returnSize = queriesSize;
    return ans;
}
```

* [sol1-JavaScript]

```JavaScript
let zd = [];

function build(l, r, rt, heights) {
    if (l === r) {
        zd[rt] = heights[l - 1];
        return;
    }

    const mid = Math.floor((l + r) / 2);
    build(l, mid, rt << 1, heights);
    build(mid + 1, r, rt << 1 | 1, heights);
    zd[rt] = Math.max(zd[rt << 1], zd[rt << 1 | 1]);
}

function query(pos, val, l, r, rt) {
    if (val >= zd[rt]) {
        return 0;
    }

    if (l === r) {
        return l;
    }

    const mid = Math.floor((l + r) / 2);
    if (pos <= mid) {
        let res = query(pos, val, l, mid, rt << 1);
        if (res !== 0) {
            return res;
        }
    }
    return query(pos, val, mid + 1, r, rt << 1 | 1);
}

var leftmostBuildingQueries = function(heights, queries) {
    const n = heights.length;
    zd.length = n * 4;
    build(1, n, 1, heights);
    const m = queries.length;
    const ans = new Array(m);
    for (let i = 0; i < m; i++) {
        let [a, b] = queries[i];
        if (a > b) {
            [a, b] = [b, a];
        }
        if (a === b || heights[a] < heights[b]) {
            ans[i] = b;
            continue;
        }
        ans[i] = query(b + 1, heights[a], 1, n, 1) - 1;
    }
    return ans;
};
```

* [sol1-TypeScript]

```TypeScript
let zd: number[];

function build(l: number, r: number, rt: number, heights: number[]): void {
    if (l === r) {
        zd[rt] = heights[l - 1];
        return;
    }

    const mid = Math.floor((l + r) / 2);
    build(l, mid, rt << 1, heights);
    build(mid + 1, r, rt << 1 | 1, heights);
    zd[rt] = Math.max(zd[rt << 1], zd[rt << 1 | 1]);
}

function query(pos: number, val: number, l: number, r: number, rt: number): number {
    if (val >= zd[rt]) {
        return 0;
    }

    if (l === r) {
        return l;
    }

    const mid = Math.floor((l + r) / 2);
    if (pos <= mid) {
        let res = query(pos, val, l, mid, rt << 1);
        if (res !== 0) {
            return res;
        }
    }
    return query(pos, val, mid + 1, r, rt << 1 | 1);
}

function leftmostBuildingQueries(heights: number[], queries: number[][]): number[] {
    const n = heights.length;
    zd = new Array(n * 4).fill(0);
    build(1, n, 1, heights);
    const m = queries.length;
    const ans: number[] = new Array(m);
    for (let i = 0; i < m; i++) {
        let [a, b] = queries[i];
        if (a > b) {
            [a, b] = [b, a];
        }
        if (a === b || heights[a] < heights[b]) {
            ans[i] = b;
            continue;
        }
        ans[i] = query(b + 1, heights[a], 1, n, 1) - 1;
    }
    return ans;
};
```

* [sol1-Rust]

```Rust
use std::vec::Vec;

fn build(l: usize, r: usize, rt: usize, heights: &Vec<i32>, zd: &mut Vec<i32>) {
    if l == r {
        zd[rt] = heights[l - 1];
        return;
    }

    let mid = (l + r) / 2;
    build(l, mid, rt << 1, heights, zd);
    build(mid + 1, r, rt << 1 | 1, heights, zd);
    zd[rt] = std::cmp::max(zd[rt << 1], zd[rt << 1 | 1]);
}

fn query(pos: usize, val: i32, l: usize, r: usize, rt: usize, zd: &Vec<i32>) -> i32 {
    if val >= zd[rt] {
        return 0;
    }

    if l == r {
        return l as i32;
    }

    let mid = (l + r) / 2;
    if pos <= mid {
        let res = query(pos, val, l, mid, rt << 1, zd);
        if res != 0 {
            return res;
        }
    }
    query(pos, val, mid + 1, r, rt << 1 | 1, zd)
}

impl Solution {
    pub fn leftmost_building_queries(heights: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {
        let n = heights.len();
        let mut zd: Vec<i32> = vec![0; n * 4];
        build(1, n, 1, &heights, &mut zd);

        let m = queries.len();
        let mut ans = Vec::with_capacity(m);
        for q in queries {
            let (mut a, mut b) = (q[0] as usize, q[1] as usize);
            if a > b {
                std::mem::swap(&mut a, &mut b);
            }
            if a == b ||  heights[a] < heights[b] {
                ans.push(b as i32);
                continue;
            }
            ans.push(query(b + 1, heights[a], 1, n, 1, &zd) - 1);
        }
        ans
    }
}
```

**复杂度分析**

- 时间复杂度：$O(m \log n)$，其中$n$ 表示数组 $\textit{heights}$ 的长度，$m$ 表示查询的长度。

- 空间复杂度：$O(n)$。

#### 方法二：离线 + 二分单调栈

**思路与算法**

和方法一相同，先对每一次查询进行预处理使得 $a < b$。如果 $\textit{heights}[a] < \textit{heights}[b]$，那么可直接得到答案为 $b$。假设 $\textit{heights}[a] >= \textit{heights}[b]$，那么答案一定在 $b$ 的右边。可以将查询离线处理，从后往前枚举，维护一个从大到小的单调栈 $\textit{st}$。对于每一个 $b$，在单调栈中二分找到第一个大于 $\textit{heights}[a]$ 的即可。

**代码**

* [sol2-C++]

```C++
class Solution {
public:
    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {
        int n = heights.size();
        int m = queries.size();
        vector<vector<pair<int, int>>> query(n);
        vector<int> ans(m);
        vector<int> st;

        for (int i = 0; i < m; i++) {
            int a = queries[i][0];
            int b = queries[i][1];
            if (a > b) swap(a, b);
            if (a == b || heights[a] < heights[b]) {
                ans[i] = b;
                continue;
            }
            query[b].push_back(make_pair(i, heights[a]));
        }

        int top = -1;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < query[i].size(); j++) {
                int q = query[i][j].first;
                int val = query[i][j].second;
                if (top == -1 || heights[st[0]] <= val) {
                    ans[q] = -1;
                    continue;
                }

                int l = 0, r = top;
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (heights[st[mid]] > val) {
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                ans[q] = st[r];
            }

            while (top >= 0 && heights[st[top]] <= heights[i]) {
                st.pop_back();
                top--;
            }
            st.push_back(i);
            top++;
        }
        return ans;
    }
};
```

* [sol2-Java]

```Java
class Solution {
    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {
        int n = heights.length;
        int m = queries.length;
        List<int[]>[] query = new List[n];
        for (int i = 0; i < n; i++) {
            query[i] = new ArrayList<int[]>();
        }
        int[] ans = new int[m];
        List<Integer> st = new ArrayList<Integer>();

        for (int i = 0; i < m; i++) {
            int a = queries[i][0];
            int b = queries[i][1];
            if (a > b) {
                int temp = a;
                a = b;
                b = temp;
            }
            if (a == b || heights[a] < heights[b]) {
                ans[i] = b;
                continue;
            }
            query[b].add(new int[]{i, heights[a]});
        }

        int top = -1;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < query[i].size(); j++) {
                int q = query[i].get(j)[0];
                int val = query[i].get(j)[1];
                if (top == -1 || heights[st.get(0)] <= val) {
                    ans[q] = -1;
                    continue;
                }

                int l = 0, r = top;
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (heights[st.get(mid)] > val) {
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                ans[q] = st.get(r);
            }

            while (top >= 0 && heights[st.get(top)] <= heights[i]) {
                st.remove(st.size() - 1);
                top--;
            }
            st.add(i);
            top++;
        }
        return ans;
    }
}
```

* [sol2-C#]

```C#
public class Solution {
    public int[] LeftmostBuildingQueries(int[] heights, int[][] queries) {
        int n = heights.Length;
        int m = queries.Length;
        IList<Tuple<int, int>>[] query = new IList<Tuple<int, int>>[n];
        for (int i = 0; i < n; i++) {
            query[i] = new List<Tuple<int, int>>();
        }
        int[] ans = new int[m];
        IList<int> st = new List<int>();

        for (int i = 0; i < m; i++) {
            int a = queries[i][0];
            int b = queries[i][1];
            if (a > b) {
                int temp = a;
                a = b;
                b = temp;
            }
            if (a == b || heights[a] < heights[b]) {
                ans[i] = b;
                continue;
            }
            query[b].Add(new Tuple<int, int>(i, heights[a]));
        }

        int top = -1;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < query[i].Count; j++) {
                int q = query[i][j].Item1;
                int val = query[i][j].Item2;
                if (top == -1 || heights[st[0]] <= val) {
                    ans[q] = -1;
                    continue;
                }

                int l = 0, r = top;
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (heights[st[mid]] > val) {
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                ans[q] = st[r];
            }

            while (top >= 0 && heights[st[top]] <= heights[i]) {
                st.RemoveAt(st.Count - 1);
                top--;
            }
            st.Add(i);
            top++;
        }
        return ans;
    }
}
```

* [sol2-Go]

```Go
func leftmostBuildingQueries(heights []int, queries [][]int) []int {
    n := len(heights)
	m := len(queries)
	query := make([][][]int, n)
	ans := make([]int, m)
	st := []int{}

    for i := 0; i < n; i++ {
        query[i] = [][]int{} 
    }
 	for i := 0; i < m; i++ {
		a, b := queries[i][0], queries[i][1]
		if a > b {
			a, b = b, a
		}
		if a == b || heights[a] < heights[b] {
			ans[i] = b
			continue
		}
		query[b] = append(query[b], []int{i, heights[a]})
	}

	top := -1
	for i := n - 1; i >= 0; i-- {
		for _, q := range query[i] {
			if top == -1 || heights[st[0]] <= q[1] {
				ans[q[0]] = -1
				continue
			}

			l, r := 0, top
			for l <= r {
				mid := (l + r) >> 1
				if heights[st[mid]] > q[1] {
					l = mid + 1
				} else {
					r = mid - 1
				}
			}
			ans[q[0]] = st[r]
		}

		for top >= 0 && heights[st[top]] <= heights[i] {
			st = st[:top]
			top--
		}
		st = append(st, i)
		top++
	}

	return ans
}
```

* [sol2-Python3]

```Python
class Solution:
    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:
        n = len(heights)
        m = len(queries)
        query = [[] for _ in range(n)]
        ans = [-1] * m
        st = []

        for i in range(m):
            a, b = queries[i]
            if a > b:
                a, b = b, a
            if a == b or heights[a] < heights[b]:
                ans[i] = b
                continue
            query[b].append((i, heights[a]))

        top = -1
        for i in range(n - 1, -1, -1):
            for q, val in query[i]:
                if top == -1 or heights[st[0]] <= val:
                    ans[q] = -1
                    continue

                l, r = 0, top
                while l <= r:
                    mid = (l + r) // 2
                    if heights[st[mid]] > val:
                        l = mid + 1
                    else:
                        r = mid - 1
                ans[q] = st[r]

            while top >= 0 and heights[st[top]] <= heights[i]:
                st.pop()
                top -= 1
            st.append(i)
            top += 1

        return ans
```

* [sol2-C]

```C
typedef struct {
    int first;
    int second;
} Pair;

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int* leftmostBuildingQueries(int* heights, int heightsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {
    int n = heightsSize, m = queriesSize;
    *returnSize = m;
    Pair* query[n];
    int* ans = (int*)malloc(m * sizeof(int));
    int* st = (int*)malloc(n * sizeof(int));
    int querySize[n];
    int pos[n];
    memset(querySize, 0, sizeof(querySize));
    memset(pos, 0, sizeof(pos));

    for (int i = 0; i < m; i++) {
        int a = queries[i][0];
        int b = queries[i][1];
        if (a > b) swap(&a, &b);
        if (a == b || heights[a] < heights[b]) {
            ans[i] = b;
            continue;
        }
        querySize[b]++;
    }
    for (int i = 0; i < n; i++) {
        query[i] = (Pair *)malloc(sizeof(Pair) * querySize[i]);
    }
    for (int i = 0; i < m; i++) {
        int a = queries[i][0];
        int b = queries[i][1];
        if (a > b) swap(&a, &b);
        if (!(a == b || heights[a] < heights[b])) {
            query[b][pos[b]].first = i;
            query[b][pos[b]].second = heights[a];
            pos[b]++;
        }
    }
    
    int top = -1;
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < querySize[i]; j++) {
            int q = query[i][j].first;
            int val = query[i][j].second;
            if (top == -1 || heights[st[0]] <= val) {
                ans[q] = -1;
                continue;
            }

            int l = 0, r = top;
            while (l <= r) {
                int mid = (l + r) / 2;
                if (heights[st[mid]] > val) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            ans[q] = st[r];
        }

        while (top >= 0 && heights[st[top]] <= heights[i]) {
            top--;
        }
        st[++top] = i;
    }
    for (int i = 0; i < n; i++) {
        free(query[i]);
    }
    return ans;
}
```

* [sol2-JavaScript]

```JavaScript
var leftmostBuildingQueries = function(heights, queries) {
    const n = heights.length;
    const m = queries.length;
    const query = Array.from({ length: n }, () => []);
    const ans = Array(m).fill(-1);
    const st = [];

    for (let i = 0; i < m; i++) {
        let [a, b] = queries[i];
        if (a > b) [a, b] = [b, a];
        if (a === b || heights[a] < heights[b]) {
            ans[i] = b;
            continue;
        }
        query[b].push([i, heights[a]]);
    }

    let top = -1;
    for (let i = n - 1; i >= 0; i--) {
        for (const [q, val] of query[i]) {
            if (top === -1 || heights[st[0]] <= val) {
                ans[q] = -1;
                continue;
            }

            let l = 0, r = top;
            while (l <= r) {
                const mid = (l + r) >> 1;
                if (heights[st[mid]] > val) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            ans[q] = st[r];
        }

        while (top >= 0 && heights[st[top]] <= heights[i]) {
            st.pop();
            top--;
        }
        st.push(i);
        top++;
    }

    return ans;
};
```

* [sol2-TypeScript]

```TypeScript
function leftmostBuildingQueries(heights: number[], queries: number[][]): number[] {
    const n = heights.length;
    const m = queries.length;
    const query: [number, number][][] = Array.from({ length: n }, () => []);
    const ans: number[] = Array(m).fill(-1);
    const st: number[] = [];

    for (let i = 0; i < m; i++) {
        let [a, b] = queries[i];
        if (a > b) [a, b] = [b, a];
        if (a === b || heights[a] < heights[b]) {
            ans[i] = b;
            continue;
        }
        query[b].push([i, heights[a]]);
    }

    let top = -1;
    for (let i = n - 1; i >= 0; i--) {
        for (const [q, val] of query[i]) {
            if (top === -1 || heights[st[0]] <= val) {
                ans[q] = -1;
                continue;
            }

            let l = 0, r = top;
            while (l <= r) {
                const mid = (l + r) >> 1;
                if (heights[st[mid]] > val) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            ans[q] = st[r];
        }

        while (top >= 0 && heights[st[top]] <= heights[i]) {
            st.pop();
            top--;
        }
        st.push(i);
        top++;
    }

    return ans;
};
```

* [sol2-Rust]

```Rust
impl Solution {
    pub fn leftmost_building_queries(heights: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {
        let n = heights.len();
        let m = queries.len();
        let mut query: Vec<Vec<(usize, i32)>> = vec![vec![]; n];
        let mut ans = vec![-1; m];
        let mut st: Vec<usize> = Vec::new();

        for i in 0..m {
            let mut a = queries[i][0] as usize;
            let mut b = queries[i][1] as usize;
            if a > b {
                std::mem::swap(&mut a, &mut b);
            }
            if a == b || heights[a] < heights[b] {
                ans[i] = b as i32;
                continue;
            }
            query[b].push((i, heights[a]));
        }

        let mut top = -1 as i32;
        for i in (0..n).rev() {
            for &(q, val) in &query[i] {
                if top == -1 || heights[st[0]] <= val {
                    ans[q] = -1;
                    continue;
                }

                let mut l = 0;
                let mut r = top;
                while l <= r {
                    let mid = (l + r) >> 1 as usize;
                    if heights[st[mid as usize]] > val {
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                ans[q] = st[r as usize] as i32;
            }

            while top >= 0 && heights[st[top as usize]] <= heights[i] {
                st.pop();
                top -= 1;
            }
            st.push(i);
            top += 1;
        }

        ans
    }
}
```

**复杂度分析**

- 时间复杂度：$O(m \log n)$，其中$n$ 表示数组 $\textit{heights}$ 的长度，$m$ 表示查询的长度。

- 空间复杂度：$O(n + m)$，其中单调栈最长为 $n$，查询最多有 $m$ 个。

